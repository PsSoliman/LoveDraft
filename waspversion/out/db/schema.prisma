
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output = env("PRISMA_CLIENT_OUTPUT_DIR")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  password String
  email String?
  hasPaid Boolean @default(false)
  datePaid DateTime?
  stripeId String?
  checkoutSessionId String?
  notifyPaymentExpires Boolean @default(false)
  credits Int @default(3)
  letters CoverLetter[]
  jobs Job[]
  externalAuthAssociations SocialLogin[]

}
model SocialLogin {
  id String @id @default(uuid())
  provider String
  providerId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  createdAt DateTime @default(now())
  @@unique([provider, providerId, userId])

}
model CoverLetter {
  id String @id @default(uuid())
  title String
  content String
  tokenUsage Int
  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId String
  user User? @relation(fields: [userId], references: [id])
  userId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

}
model Job {
  id String @id @default(uuid())
  title String
  company String
  location String
  description String
  coverLetter CoverLetter[]
  user User? @relation(fields: [userId], references: [id])
  userId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isCompleted Boolean @default(false)

}
